/*! jQuery UI - v1.11.4 - 2015-03-13
* http://jqueryui.com
* Copyright jQuery Foundation and other contributors; Licensed MIT */
(function (t) {
    "function" == typeof define && define.amd ? define(["jquery", "./effect"], t) : t(jQuery);

    function size(e, i) {
        var s, n, o, a, r, h, l, c, u, d, p, f, g, m, v, _, b, x, w, T, C, E, S, y, P, M, A, O, j, L, N, B, D, z, H, I, R, F, U, q, G, V, X, Y, Z, J;

        s = t(this);
        n = ["position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity"];
        o = ["position", "top", "bottom", "left", "right", "overflow", "opacity"];
        a = ["width", "height", "overflow"];
        r = ["fontSize"];
        h = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"];
        l = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"];

        p = t.effects.setMode(s, e.mode || "effect");
        f = e.restore || "effect" !== p;
        g = e.scale || "both";
        m = e.origin || ["middle", "center"];

        v = s.css("position");
        _ = f ? n : o;
        b = {
            height: 0,
            width: 0,
            outerHeight: 0,
            outerWidth: 0
        };

        s.from = e.from || (p === "show" ? b : s.from || s.offset());
        s.to = e.to || (p === "hide" ? b : s.to || s.offset());

        if ("toggle" === e.mode && "show" === p) {
            s.from = e.to || b;
            s.to = e.from || s.offset();
        }

        o.from = {
            y: s.from.height / s.height(),
            x: s.from.width / s.width()
        };
        o.to = {
            y: s.to.height / s.height(),
            x: s.to.width / s.width()
        };

        if ("box" === g || "both" === g) {
            if (o.from.y !== o.to.y) {
                _( = _.concat(h));
                s.from = t.effects.setTransition(s, h, o.from.y, s.from);
                s.to = t.effects.setTransition(s, h, o.to.y, s.to);
            }

            if (o.from.x !== o.to.x) {
                _( = _.concat(l));
                s.from = t.effects.setTransition(s, l, o.from.x, s.from);
                s.to = t.effects.setTransition(s, l, o.to.x, s.to);
            }
        }

        if ("content" === g || "both" === g) {
            if (o.from.y !== o.to.y) {
                _( = _.concat(r).concat(a));
                s.from = t.effects.setTransition(s, r, o.from.y, s.from);
                s.to = t.effects.setTransition(s, r, o.to.y, s.to);
            }
        }

        t.effects.save(s, _);
        s.show();
        t.effects.createWrapper(s);
        s.css("overflow", "hidden").css(s.from);

        if (m) {
            x = t.effects.getBaseline(m, s);
            w = (s.outerHeight() - s.outerHeight()) * x.y;
            T = (s.outerWidth() - s.outerWidth()) * x.x;
            s.from.top = w;
            s.from.left = T;
            s.to.top = (s.outerHeight() - s.to.outerHeight) * x.y;
            s.to.left = (s.outerWidth() - s.to.outerWidth) * x.x;
            s.css(s.from);
        }

        if ("content" === g || "both" === g) {
            u = u.concat(["marginTop", "marginBottom"]).concat(r);
            l = l.concat(["marginLeft", "marginRight"]);
            a = n.concat(u).concat(l);
            s.find("*[width]").each(function () {
                var i = t(this),
                    s = {
                        height: i.height(),
                        width: i.width(),
                        outerHeight: i.outerHeight(),
                        outerWidth: i.outerWidth()
                    };

                f && t.effects.save(i, a);

                i.from = {
                    height: s.height * o.from.y,
                    width: s.width * o.from.x,
                    outerHeight: s.outerHeight * o.from.y,
                    outerWidth: s.outerWidth * o.from.x
                };

                i.to = {
                    height: s.height * o.to.y,
                    width: s.width * o.to.x,
                    outerHeight: s.height * o.to.y,
                    outerWidth: s.width * o.to.x
                };

                if (o.from.y !== o.to.y) {
                    i.from = t.effects.setTransition(i, u, o.from.y, i.from);
                    i.to = t.effects.setTransition(i, u, o.to.y, i.to);
                }

                if (o.from.x !== o.to.x) {
                    i.from = t.effects.setTransition(i, l, o.from.x, i.from);
                    i.to = t.effects.setTransition(i, l, o.to.x, i.to);
                }

                i.css(i.from);
                i.animate(i.to, e.duration, e.easing, function () {
                    f && t.effects.restore(i, a);
                });
            });
        }

        s.animate(s.to, {
            queue: !1,
            duration: e.duration,
            easing: e.easing,
            complete: function () {
                if (0 === s.to.opacity) {
                    s.css("opacity", s.from.opacity);
                }

                if ("hide" === p) {
                    s.hide();
                }

                t.effects.restore(s, _);

                if ("static" === v) {
                    s.css({
                        position: "relative",
                        top: s.to.top,
                        left: s.to.left
                    });
                } else {
                    t.each(["top", "left"], function (t, e) {
                        s.css(e, function (e, i) {
                            var s = parseInt(i, 10),
                                n = t ? s.to.left : s.to.top;

                            return "auto" === i ? n + "px" : s + n + "px";
                        });
                    });
                }

                t.effects.removeWrapper(s);
                i();
            }
        });
    }

    t.effects.effect.size = size;
})(jQuery);
